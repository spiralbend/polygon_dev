<!DOCTYPE html>
<html>
<head>
<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript">
$(function() {

var canvas = document.getElementById('thiscanvas')
var ctx = canvas.getContext('2d')
var cw = canvas.width; var ch = canvas.height

var points = 16000 //20000
var grain = 35000
var dt = 0.0041
var nobs = 3; var delay = 10
var zoom = 1; var pix = 1
var xof = 2560; var yof = 720

var objects = Array.from(Array(20),() => new Array(3))
var bodies = [9,20,13]; var size = [1,0.33,1.8]
var spins = [0, 0.75*Math.PI, 1.5*Math.PI]
var urbit = [0, 0.75*Math.PI, 1.5*Math.PI]
var ds = new Array(nobs)

var colors = 10000; var colorspeed = 6; var scheme = 1
var wander = Array.from(Array(3),() => new Array(colors))
var argb = new Array(3); var drgb = new Array(3)
var oink = "#00FF00"; var clink="#000000"; var tink="#00FF00"

var t = 0; var c = 0; var u = 0; var du = 0.0011
var f = true; var neg = false; var dorand = false
var pars = 9; var edge = 12; var stopped = false;
var v = new Array(pars); var tv = new Array(pars); var dv = new Array(pars)
var defgrain = grain; var defpts = points; var defdt = dt

var draw = function(ctx) {
	t=0
	for (var p = 0; p <= points; p++) {
		for (var q = 0; q < nobs; q++) {
			tu = u + urbit[q]
			xo = xof + 1500 * Math.sin(tu)
			yo = yof + 700  * Math.sin(tu) * Math.cos(tu)			
			R = radius(bodies[q],size[q])
			scope = Math.abs(R)
			X = xo + R * Math.cos(t+spins[q])
			Y = yo + R * Math.sin(t+spins[q])
			if (scheme == 0) {
				ctx.fillStyle = oink
				ctx.fillRect(X,Y,pix,pix)
			} else if (scheme == 1) {
				var Z = Math.floor(scope + 3000 * q) % colors
				ctx.fillStyle = `rgb(${wander[0][Z]},${wander[1][Z]},${wander[2][Z]})`
				ctx.fillRect(X,Y,pix,pix)
			} else {
				ctx.fillStyle = "#FF00FF"
				ctx.fillRect(X,Y,pix,pix)
			}
		}
		t += dt
	}
	for (var q = 0; q < nobs; q++) {
		spins[q] += ds[q]
	}
	if (scheme == 1) {
		for (var i = 0; i < colorspeed; i++) {
			for (var j = 0; j < 3; j++) {
				argb[j] += drgb[j]
			}
			for (var j = 0; j < 3; j++) {
				if      (argb[j] < 25)  { argb[j] = 25;  drgb[j] *= -1 }
				else if (argb[j] > 255) { argb[j] = 255; drgb[j] *= -1 }
				wander[j].unshift(argb[j]); wander[j].pop()
			}
		}
	}
}

init()
makeObjects()
colormap()
var h = setInterval(main, delay)

function main() {
	for (var q = 0; q <= pars; q++) {
		v[q] += dv[q]
		if (Math.abs(v[q]) > edge) {dv[q] *= -1}
	}
	ctx.fillStyle = clink
	ctx.fillRect(0, 0, cw, ch)
	draw(ctx)
	c++; u += du
	ctx.fillStyle = tink
	ctx.font = "20px Courier";
	ctx.fillText("object A: [" + objects[bodies[2]][0] + "] (" + bodies[0] + ")",50,50)
	ctx.fillText("object B: [" + objects[bodies[0]][0] + "] (" + bodies[1] + ")",50,75)
	ctx.fillText("object C: [" + objects[bodies[1]][0] + "] (" + bodies[2] + ")",50,100)
	ctx.fillText("points: " + points.toFixed(0),50,125)
	ctx.fillText("zscale: " + zoom.toFixed(2),50,150)
	ctx.fillText("frames: " + c,50,175)
	ctx.fillText("Δt: " + dt.toFixed(5),50,200)
	for (var q = 0; q <= pars; q++) {
		ctx.fillText("μ" + q + ": " + v[q].toFixed(5),50,225+q*25)
	}
	if ((dorand) && (Math.random()*120<1)) {randomize()}
}

function init() {
	for (var q = 0; q <= pars; q++) {
		if (f) {
			s = 0
			v[q] = Math.random()*edge
			if (Math.random()*2>1) {v[q] *= -1}
		}
		tv[q] = Math.random()*edge*3
		if (Math.random()*2>1) {tv[q] *= -1}
		dv[q] = (tv[q] - v[q])/grain
	}
	for (var q = 0; q < nobs; q++) {
		ds[q] = (Math.round(Math.random()*4)+3) * 0.001
		if (Math.random()*2>1) {ds[q] *= -1}
	}
}

function colormap() {
	for (var i = 0; i < 3; i++) {
		argb[i] = Math.round(Math.random()*255)
		drgb[i] = Math.random() * 0.75
		if (Math.random()*2 > 1) { drgb[i] *= -1 }
	}
	for (var i = 0; i <= colors; i++) {
		for (var j = 0; j < 3; j++) {
			argb[j] += drgb[j]
		}
		for (var j = 0; j < 3; j++) {
			if      (argb[j] < 25)  { argb[j] = 25;  drgb[j] *= -1 }
			else if (argb[j] > 255) { argb[j] = 255; drgb[j] *= -1 }
			wander[j][i] = argb[j]
		} 
	}
	for (var j = 0; j < 3; j++) {
		argb[j] = wander[j][0]
	}
}

function randomize() {
	var arr = [];
	while(arr.length < nobs) {
		var pic = Math.round(Math.random() * 20)
		if(arr.indexOf(pic) === -1) arr.push(pic)
	}
	for (var q = 0; q < nobs; q++) {
		bodies[q] = arr[q]
	}
	f = true
	init()
}

function radius(obj,size) {
	switch (obj) {
		case 1:  R = size * zoom * objects[obj][1] * (v[0] * Math.sin(v[1]*t)**v[2] + v[3] * Math.cos(Math.tan(v[4]*t))**v[5]); break
		case 2:  R = size * zoom * objects[obj][1] * (v[0] * Math.sin(v[1]*t)**v[2] + v[3] * Math.cos(v[4]*t)); break
		case 3:  R = size * zoom * objects[obj][1] * (v[0] * Math.sin(v[1]*t)**v[2] + v[3] * Math.cos(Math.tan(v[4]*t)**v[5])); break
		case 4:  R = size * zoom * objects[obj][1] * (v[0] * Math.sin(v[1]*t) + v[3] * Math.cos(v[4]*t)); break
		case 5:  R = size * zoom * objects[obj][1] * Math.tan( Math.log(Math.abs((v[0] * Math.sin(v[1]*t))**v[2] + (v[3] * Math.cos(v[4]*t))**v[5])) ); break
		case 6:  R = size * zoom * objects[obj][1] * Math.log( Math.sin(v[1]*t)**v[2] + v[3] * Math.cos(v[4]*t) ); break
		case 7:  R = size * zoom * objects[obj][1] * Math.sin(v[1]*t) ** Math.cos(v[4]*t); break
		case 8:  R = size * zoom * objects[obj][1] * Math.sin(v[1]*t) ** (Math.cos(v[4]*t)**v[2]); break
		case 9:  R = size * zoom * objects[obj][1] * (v[0] * Math.sin(v[1]*t) + v[3] * Math.cos(t)**v[5] + Math.tan(v[6]*t)); break
		case 10: R = size * zoom * objects[obj][1] * Math.tan(Math.sin(v[1]*t)) ** Math.tan(Math.cos(v[4]*t)**v[5]); break
		case 11: R = size * zoom * objects[obj][1] * Math.exp( (v[0] * Math.sin(v[1]*t))**v[2] + (v[3] * Math.cos(v[4]*t))**v[5] ); break
		case 12: R = size * zoom * objects[obj][1] * (v[0] * Math.sin(v[1]*t)**v[2] + v[3] * Math.cos(v[4]*t)**v[5]); break
		case 13: R = size * zoom * objects[obj][1] * Math.exp( v[0] * Math.sin(v[1]*t) * v[2] * Math.tan(v[3]*t) / t ); break
		case 14: R = size * zoom * objects[obj][1] * Math.exp( v[2] * Math.tan(v[3]*t) / (t+v[0]) ); break
		case 15: R = size * zoom * objects[obj][1] * Math.exp ( v[0] * Math.sin(v[1]*t)**v[2] / t ); break
		case 16: R = size * zoom * objects[obj][1] * v[0] * Math.exp( -1 * Math.abs(v[1]*Math.sin(v[2]*t) ** Math.cos(v[3]*t)) ); break
		case 17: R = size * zoom * objects[obj][1] * Math.exp( -1 * Math.abs(v[0]*Math.sin(v[1]*t) ** Math.cos(v[1]*t)) ); break
		case 18: R = size * zoom * objects[obj][1] * v[6]*t * Math.log(Math.abs((v[4]*2) * (t+v[3]**3) * Math.exp (( (t+v[3]**3) * Math.sin((t+v[3]**3)**2 ) / 3**t ) ))); break
		case 19: R = size * zoom * objects[obj][1] * (t+v[3]**2) * Math.exp ( v[2] * (t+v[3]**2) * Math.sin((t+v[3]**2)**2 + (t+v[3]**2)) * v[2] / 2**t ); break
		case 20: R = size * zoom * objects[obj][1] * v[0] * Math.exp((Math.sin(v[1]*t) * Math.cos(t)**v[5]))**Math.tan(v[5]*t); break
		default: R = size * zoom * objects[obj][1] * v[0] * ((Math.sin(v[1]*t) * Math.cos(t)**v[5]))**Math.tan(v[5]*t)**v[2];
	}
	return R
}

function makeObjects() {
	objects[0]  = ["quantum baseline", 100]
	objects[1]  = ["heavy metallicity", 40]
	objects[2]  = ["occulted crystalline", 40]
	objects[3]  = ["neutron star", 40]
	objects[4]  = ["quantum baseline", 40]
	objects[5]  = ["gamma ray burst", 120]
	objects[6]  = ["spike proteins", 220]
	objects[7]  = ["antimatter jellyfish", 350]
	objects[8]  = ["plasma ball", 480]
	objects[9]  = ["wormhole", 50]
	objects[10] = ["tidal disruption", 320]
	objects[11] = ["event horizon", 200]
	objects[12] = ["chaotic resonance", 60]
	objects[13] = ["string theory", 400]
	objects[14] = ["fuzzy math", 350]
	objects[15] = ["double helix", 525]
	objects[16] = ["coriolis effect", 400]
	objects[17] = ["grand design", 2500]
	objects[18] = ["galactic embryo", 3]
	objects[19] = ["spindle groove", 5]
	objects[20] = ["brain waves", 75]
}

document.body.style.overflow = 'hidden'
document.getElementById('stats').innerHTML = 'color curves by @spiralbend ©2021'
document.getElementById('stats').style.fontSize='20px'
document.getElementById('stats').style.fontFamily='Arial'

// -,+ scale (zoom)
// <,> # graph points
// [,] plot density
// 0-9,qwerty + SHIFT/CTRL object selection
// zxcvb color
// ESC pause/resume
// ENT Δ vector nudge
// DEL n-space jump
// SPACE reverse time
// TAB randomize objects

document.onkeydown = function(e) {
	switch (e.keyCode) { 
		case 221: dt *= 1.01; break //]
		case 219: dt /= 1.01; break //[
		case 187: zoom *= 1.05; break //+
		case 189: zoom /= 1.05; break //-
		case 190: points *= 1.1; break //>
		case 188: points /= 1.1; break //<
		case 32: e.preventDefault(); for (var q = 0; q <= pars; q++) { dv[q] *= -1 }; break //space
		case 112: e.preventDefault(); points = 16000; dt = 0.00811; f = false; clearInterval(h); h = setInterval(main, delay); break //f1
		case 113: e.preventDefault(); points = defpts; grain = defgrain; dt = defdt; f = false; clearInterval(h); h = setInterval(main, delay); break //f2
		case 114: e.preventDefault(); pix -= 1; break //f3
		case 115: e.preventDefault(); pix += 1; break //f4
		case 13: f = false; init(); break //enter
		case 8: e.preventDefault(); f = true; init(); break //delete
		case 9: e.preventDefault(); randomize(); break //TAB
		case 49: e.preventDefault(); if (e.ctrlKey) {bodies[2] = 1}  else if (e.shiftKey) {bodies[1] = 1}  else {bodies[0] = 1};  break
		case 50: e.preventDefault(); if (e.ctrlKey) {bodies[2] = 2}  else if (e.shiftKey) {bodies[1] = 2}  else {bodies[0] = 2};  break
		case 51: e.preventDefault(); if (e.ctrlKey) {bodies[2] = 3}  else if (e.shiftKey) {bodies[1] = 3}  else {bodies[0] = 3};  break
		case 52: e.preventDefault(); if (e.ctrlKey) {bodies[2] = 4}  else if (e.shiftKey) {bodies[1] = 4}  else {bodies[0] = 4};  break
		case 53: e.preventDefault(); if (e.ctrlKey) {bodies[2] = 5}  else if (e.shiftKey) {bodies[1] = 5}  else {bodies[0] = 5};  break
		case 54: e.preventDefault(); if (e.ctrlKey) {bodies[2] = 6}  else if (e.shiftKey) {bodies[1] = 6}  else {bodies[0] = 6};  break
		case 55: e.preventDefault(); if (e.ctrlKey) {bodies[2] = 7}  else if (e.shiftKey) {bodies[1] = 7}  else {bodies[0] = 7};  break
		case 56: e.preventDefault(); if (e.ctrlKey) {bodies[2] = 8}  else if (e.shiftKey) {bodies[1] = 8}  else {bodies[0] = 8};  break
		case 57: e.preventDefault(); if (e.ctrlKey) {bodies[2] = 9}  else if (e.shiftKey) {bodies[1] = 9}  else {bodies[0] = 9};  break
		case 48: e.preventDefault(); if (e.ctrlKey) {bodies[2] = 10} else if (e.shiftKey) {bodies[1] = 10} else {bodies[0] = 10}; break
		case 81: e.preventDefault(); if (e.ctrlKey) {bodies[2] = 11} else if (e.shiftKey) {bodies[1] = 11} else {bodies[0] = 11}; break //q
		case 87: e.preventDefault(); if (e.ctrlKey) {bodies[2] = 12} else if (e.shiftKey) {bodies[1] = 12} else {bodies[0] = 12}; break //w
		case 69: e.preventDefault(); if (e.ctrlKey) {bodies[2] = 13} else if (e.shiftKey) {bodies[1] = 13} else {bodies[0] = 13}; break //e
		case 82: e.preventDefault(); if (e.ctrlKey) {bodies[2] = 14} else if (e.shiftKey) {bodies[1] = 14} else {bodies[0] = 14}; break //r
		case 84: e.preventDefault(); if (e.ctrlKey) {bodies[2] = 15} else if (e.shiftKey) {bodies[1] = 15} else {bodies[0] = 15}; break //t
		case 89: e.preventDefault(); if (e.ctrlKey) {bodies[2] = 16} else if (e.shiftKey) {bodies[1] = 16} else {bodies[0] = 16}; break //y
		case 85: e.preventDefault(); if (e.ctrlKey) {bodies[2] = 17} else if (e.shiftKey) {bodies[1] = 17} else {bodies[0] = 17}; break //u
		case 73: e.preventDefault(); if (e.ctrlKey) {bodies[2] = 18} else if (e.shiftKey) {bodies[1] = 18} else {bodies[0] = 18}; break //i
		case 79: e.preventDefault(); if (e.ctrlKey) {bodies[2] = 19} else if (e.shiftKey) {bodies[1] = 19} else {bodies[0] = 19}; break //o
		case 80: e.preventDefault(); if (e.ctrlKey) {bodies[2] = 20} else if (e.shiftKey) {bodies[1] = 20} else {bodies[0] = 20}; break //p
		case 68: colormap(); break //d pallette
		case 70: if (dorand) {dorand = false} else {dorand = true; randomize()}; break //f toggle auto rand
		case 90: oink="#FF0000"; break //z red
		case 88: oink="#00FF00"; break //x green
		case 67: oink="#0000FF"; break //c blue
		case 86: oink="#00FFFF"; break //v cyan
		case 66: oink="#FF00FF"; break //b magenta
		case 78: oink="#FFFF00"; break //n yellow
		case 77: oink="#FFFFFF"; break //m white
		case 27: //ESC stop
			if(stopped) {
				h = setInterval(main, delay)
				stopped = false
			} else {
				clearInterval(h)
				stopped = true
			}
			break
		case 65: //a inverse
			if(neg) {
				oink = "#00FF00"; clink="#000000"; tink="#00FF00"
				neg = false
			} else {
				oink = "#000000"; clink="#FFFFFF"; tink="#0000FF"
				neg = true
			}
			break
		case 83: //s mono
			if(scheme == 1) {
				scheme = 0
			} else {
				scheme = 1
			}
			break
		}
	}

// var obj1 = 7; var scale = 280; var pix = 2
// var grain = 100000; var defgrain = grain
// var points = 30000; var defpts = points; var ds = 0.003
// var dt = 0.00236; var defdt = dt; var delay = 17
// var Xo = 1600; var Yo = 900; var maxr = 3000
});
</script>
<style type="text/css">
	#thiscanvas {border:0px solid;position:absolute;top:0px;background-color:black;}
</style>
</head>
<p id="stats"></p>
<body style="position:relative;" bgcolor="black">
<canvas id="thiscanvas" width=6000, height=6000>
</canvas>
Wot's... Uh the Deal?
</body>
</html>
